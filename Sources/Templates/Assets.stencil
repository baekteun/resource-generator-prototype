// Generated by ResourceGenerator
// swiftlint:disable all

{% macro accessLevel %}public{% endmacro %}
import Foundation
import UIKit

enum Assets {

    // MARK: - Colors

    {% call accessLevel %} enum Colors: Sendable {
        {% for color in colors %}
        {% call accessLevel %} static let {{ color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords }} = ColorResource(name: "{{ color.name }}", bundle: .main)
        {% endfor %}
    }

    // MARK: - Images

    {% call accessLevel %} enum Images: Sendable {
        {% for image in images %}
        {% call accessLevel %} static let {{ image.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords }} = ImageResource(name: "{{ image.name }}", bundle: .main)
        {% endfor %}
    }

    // MARK: - Data

    {% call accessLevel %} enum Data: Sendable {
        {% for data in dataAssets %}
        {% call accessLevel %} static let {{ data.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords }} = DataResource(name: "{{ data.name }}", bundle: .main)
        {% endfor %}
    }
}

// MARK: - Resource Types

{% call accessLevel %} struct ColorResource: Sendable {
    {% call accessLevel %} let name: String
    {% call accessLevel %} let bundle: Bundle

    {% call accessLevel %} var color: UIColor {
        guard let color = UIColor(named: name, in: bundle, compatibleWith: nil) else {
            fatalError("Unable to load color named \(name).")
        }
        return color
    }
}

{% call accessLevel %} struct ImageResource: Sendable {
    {% call accessLevel %} let name: String
    {% call accessLevel %} let bundle: Bundle

    {% call accessLevel %} var image: UIImage {
        guard let image = UIImage(named: name, in: bundle, compatibleWith: nil) else {
            fatalError("Unable to load image named \(name).")
        }
        return image
    }
}

{% call accessLevel %} struct DataResource: Sendable {
    {% call accessLevel %} let name: String
    {% call accessLevel %} let bundle: Bundle

    {% call accessLevel %} func data() throws -> Data {
        guard let url = bundle.url(forResource: name, withExtension: nil) else {
            throw ResourceError.notFound
        }
        return try Data(contentsOf: url)
    }
}

{% call accessLevel %} enum ResourceError: Error {
    case notFound
} 
